#+TITLE: afl源码分析
#+DATE: 2025-03-20
#+JEKYLL_LAYOUT: post
#+JEKYLL_CATEGORIES: AFL
#+JEKYLL_TAGS: AFL

最近在阅读alf的源代码时做的一些笔记，有点乱不往论坛发了，自己回顾的时候看看的，有很多都引用的sakura师傅的分析笔记。

** afl的设计

afl被设计用来对开源的代码进行模糊测试，通过编译和运行时两方面的机制配合一起工作。编译时插桩，插桩代码用于捕获每个代码块的执行情况，给每个block随机分配一个编号，通过当前运行的代码块编号和上一个代码块编号即可获取执行的路径信息，这就是我们要记录的信息。在运行时，afl-fuzz会分配一大块共享内存跟目标程序通信，插桩代码会计算边信息，并在共享内存中标记该边，从而可以让afl-fuzz感知到本次运行情况。afl-fuzz根据这些路径执行信息，再选择测试用例的变异方式。


** afl-gcc

我们通过环境变量设置可以将C/C++的编译器替换为afl-gcc 它的作用就是根据我们的环境参数配置给编译添加一些编译选项，并调用真正的编译器执行编译工作。

*** find_as:

寻找afl的路径。会先检查有没有设置AFL_PATH的环境变量，如果设置了，会先在这个路径中寻找as，如果没有会在afl-gcc同级目录中找。

*** edit_params:

检查有没有通过AFL_CC之类的环境变量指定编译器，如果没设置就用默认的。然后后边就是检查传进来参数，特殊处理一些特别的参数：

-B：指定编译工具的路径（如 as、ld、ar 等），替换成新的as的路径；

-integrated-as -pipe 忽略掉；-fsanitize=address -fsanitize=memory：开启asan；

检查宏FORTIFY_SOURCE有没有被定义：开启fortify检查。

注意：后边两种安全编译选项也可以通过环境变量设置AFL_USE_ASAN AFL_USE_MSAN AFL_HARDEN这三个互斥，不能同时设置。

AFL_DONT_OPTIMIZE如果不设置，会自动开启-O3，-funroll-loops（-funroll-loops 是 -O3 优化级别的一部分，用于最大化性能优化）优化，并且添加-D__AFL_COMPILER=1

-DFUZZING_BUILD_MODE_UNSAFE_FOR_PRODUCTION=1这两个宏定义。第一个是AFL特有的宏，第二个libfuzzer也有。

AFL_NO_BUILTIN如果设置了，添加一些no-builtin的选项。

** afl-as

[afl](https://afl-1.readthedocs.io/en/latest/about_afl.html)

由于在afl-gcc阶段通过-B指定了as的路径为afl-as，编译器就会先用我们指定的这个afl-as。

这个是编译阶段的关键，当源码别编译成汇编后，就会使用as工具将汇编转成机器码，这个阶段我们就可以通过修改汇编的方式将代码插桩，然后调用真正的as，再去执行汇编的操作。

AFL_INST_RATIO

*** 插桩的具体实现

关键函数：add_instrumentation

循环读取汇编文件（input_file），每次读取一行，检查代码的架构32位还是64位，后续会选择插入不同的代码。还得要分辨代码段和非代码段。如果汇编是intel语法格式的段也不能插入，只能插入AT&T格式的。跳过 =__asm__= 这种内联汇编的形式。遇到jxx这种跳转的指令（jmp不处理）就认为后续为一个代码块的开始，如果有标签的也是一个block的开始，（jmp后边block的是不处理的原因是，它不会被执行。如果该block被执行说明有引用，那么一定会有一个标签在前边，那么在处理标签类型的时候处理，防止重复处理）。在每个block前添加桩代码的汇编指令。添加的汇编指令如下（以x64为例）：

#+BEGIN_SRC C

  "\n"
  "/* --- AFL TRAMPOLINE (64-BIT) --- */\n"
  "\n"
  ".align 4\n"
  "\n"
  "leaq -(128+24)(%%rsp), %%rsp\n"
  "movq %%rdx,  0(%%rsp)\n"
  "movq %%rcx,  8(%%rsp)\n"
  "movq %%rax, 16(%%rsp)\n" //保存寄存器信息
  "movq $0x%08x, %%rcx\n"   //这个是块的编号，在afl-as中添加的时候，通过R(MAP_SIZE)随机生成的 #define R(x) (random() % (x))  #define MAP_SIZE            (1 << MAP_SIZE_POW2) #define MAP_SIZE_POW2       16
  "call __afl_maybe_log\n"   //把通过rcx传递的块编号记录下来。
  "movq 16(%%rsp), %%rax\n"  //恢复寄存器信息
  "movq  8(%%rsp), %%rcx\n"
  "movq  0(%%rsp), %%rdx\n"
  "leaq (128+24)(%%rsp), %%rsp\n"
  "\n"
  "/* --- END --- */\n"
  "\n";

#+END_SRC

__afl_maybe_log代码会先检查 =__afl_area_ptr= 变量有没有初始化,如果没有的话，说明还未初始化会先去执行 =__afl_setup= 初始化，
=__afl_setup= 这个初始化过程就是通过环境变量SHM_ENV_VAR传递的值，去获取共享内存，并通过199管道通知afl-fuzz，然后通过fork的方式，创建子进程，子进程是真正的执行体，父进程会挂起等待子进程执行完。通过fork这种方式可以减少每次执行进程的启动加载时间。198，199管道是用来和afl-fuzz同步的。198管道是afl-fuzz通知forkserver去创建子进程的。子进程被fork出来后会先去执行 =__afl_fork_resume= 关闭198，199管道。并立即执行一次 =_afl_store=。

真正的执行体是不需要初始化的，因为已经从forkserver里继承了这些资源。只需要执行 =__afl_store= 即可， =__afl_store= 函数的功能如下

#+BEGIN_SRC C
  cur_location = <COMPILE_TIME_RANDOM>;
  shared_mem[cur_location ^ prev_location]++;
  prev_location = cur_location >> 1;
#+END_SRC

将当前块的编号和记录的上一个块的编号右移1位后的异或值做索引当做边的hash，记录在共享内存中。

有个问题，如果程序是多线程的会让记录edge的信息不准确。



** afl-fast-clang

因为AFL对于上述通过afl-gcc来插桩这种做法已经属于不建议，并提供了更好的工具afl-clang-fast，通过llvm pass来插桩。
afl-clang-fast.c这个文件其实是clang的一层wrapper，和之前的afl-gcc一样，只是定义了一些宏，和传递了一些参数给真正的clang。


** afl-fuzz

*** 基本使用：

指定参数
-i 输入目录，目录中是测试用例
-o 输出目录
-m 指定内存最大限制
-t 超时时间
-- 分割
后边是fuzz的程序
@@ 读文件，不加这个就是从标准输入来读

#+BEGIN_SRC C
  -i dir        - input directory with test cases
  -o dir        - output directory for fuzzer findings

Execution control settings:

  -f file       - location read by the fuzzed program (stdin)
  -t msec       - timeout for each run (auto-scaled, 50-1000 ms)
  -m megs       - memory limit for child process (50 MB)
  -Q            - use binary-only instrumentation (QEMU mode)

Fuzzing behavior settings:

  -d            - quick & dirty mode (skips deterministic steps)
  -n            - fuzz without instrumentation (dumb mode)
  -x dir        - optional fuzzer dictionary (see README)

Other stuff:

  -T text       - text banner to show on the screen
  -M / -S id    - distributed mode (see parallel_fuzzing.txt)
  -C            - crash exploration mode (the peruvian rabbit thing)
  -V            - show version number and exit

  -b cpu_id     - bind the fuzzing process to the specified CPU core
  
#+END_SRC

docs目录下有很多的文档可以看看。里边有关于界面显示的（status_screen.txt），界面上的各个字段都有详细的说明。


** 源码分析

*** 初始化部分

**** 参数解析

首先就是参数解析，根据不同的参数设置不同的全局变量。这里只简单介绍下后续源码分析的时候会再和这几个参数联系起来：

=-M，-S= ：这两个都是跟并行有关，-M是指定这个任务为master =afl-fuzz -i testcase_dir -o sync_dir -M fuzzer01 [...other stuff...]= -S是指定这个任务为secondary =afl-fuzz -i testcase_dir -o sync_dir -S fuzzer02 [...other stuff...]=

=-x= ：指定存放字典文件的目录  =t= ：超时检测 =-m= ：限制内存空间，格式为1T，1G，1K，1M这种。 =-b= ：绑定cpu， =-d= 跳过确定性变异， =-B= ：加载bitmap，如果您在正常模糊测试过程中发现一个有趣的测试用例，并且想要对其进行变异，而不重新发现在先前运行期间已经发现的任何测试用例，则此选项很有用。要使用此模式，您需要将 -B 指向先前运行为完全相同的二进制文件生成的 fuzz_bitmap。 =-C= ： 通过监控目标程序的执行状态自动识别崩溃 =-n= ：无插桩模式，这个就不会去探测覆盖率了。还跟一个AFL_DUMB_FORKSRV环境变量相关联  =-T= ：banner 允许用户为模糊测试会话设置一个自定义标题（Banner），用于在并行测试或多实例运行时区分不同会话。例如，在分布式测试中，不同实例可通过 Banner 快速识别归属  =-Q= ：联合QEMU做闭源的fuzz，

**** 检测环境变量

ASAN_OPTIONS="abort_on_error=1"/"symbolize=0"
MSAN_OPTIONS="exit_code=MSAN_ERROR"/"symbolize=0"
AFL_NO_FORKSRV 禁用forkserver模式

AFL_PRELOAD这个用来设置动态链接库的路径，启动程序的时候设置LD_PRELOAD用的

**** 保存命令行参数
save_cmdline
**** 修复标题
fix_up_banner

设置use_banner

**** 检查是不是tty模式
check_if_tty
检查AFL_NO_UI环境变量，设置了这个就设为notty模式，也会检查标准输出是否合法。

**** get_core_count获取cpu个数
可以看到UNIX不同平台的实现方式，把结果存在cpu_core_count变量中。

如果开启了HAVE_AFFINITY宏的平台就会调用bind_to_free_cpu

**** 检查coredump有没有开启

check_crash_handling

**** 检查cpu的调频信息（不重要）

check_cpu_governor，检查cpu频率上下限，如果相同，会推出

设置AFL_SKIP_CPUFREQ环境变量可以跳过检查

**** setup_post

检查环境变量有没有设置AFL_POST_LIBRARY，如果设置了就会加载动态链接库找afl_postprocess函数赋到post_handler函数指针变量上，相当于一种插件形式，自定义处理测试完成后对结果的分析与优化，包括崩溃样本处理、覆盖率统计和语料库优化。

**** setup_shm

设置共享内存，并设置SHM_ENV_VAR环境变量，用于与目标进程通信，接收测试结果。

**** init_count_class16

=count_class_lookup8= =count_class_lookup16= ，这其实是因为trace_bits是用一个字节来记录是否到达这个路径，和这个路径被命中了多少次的，而这个次数在0-255之间，但比如一个循环，它循环5次和循环6次可能是完全一样的效果，为了避免被当成不同的路径，或者说尽可能减少因为命中次数导致的区别。在每次去计算是否发现了新路径之前，先把这个路径命中数进行规整，比如把命中5次和6次都统一认为是命中了8次。而为什么又需要用一个count_class_lookup16呢，是因为AFL在后面实际进行规整的时候，是一次读两个字节去处理的，为了提高效率，这只是出于效率的考量，实际效果还是上面这种效果。

**** setup_dirs_fds准备输出目录

**** read_testcases 

从输入目录读取测试用例，并加入到队列中：首先使用scandir+alphasort扫描目录，（不使用readdir的原因是防止返回的结果随机），然后遍历过滤体积过大的测试用例，体积用MAX_FILE这个宏来限制，并且检查输入目录的.state/deteministic_done下的文件，这个目录下代表着确定性的fuzz，如果已经完成了没有必要再重复，然后调用add_to_queue将测试用例添加到队列。队列使用一个list来维护。首先添加到queue_top中。q_prev100：跳表，使用next_100，每100个跳一次，加速迭代。

**** load_auto 加载自动生成的附加内容

读取.state/auto_extras/目录下的内容，这个目录的文件在save_auto函数中写入，作用后续再讲。

**** pivot_inputs

在输出目录中为输入测试用例创建硬链接，选择好的名称并相应地进行旋转。

**** load_extras函数
如果通过-x 设置了extras目录，加载里边的字典文件，作为变异参考。

**** find_timeout

如果没有设置-t，我们不希望一遍又一遍地自动调整超时时间，以防止超时值因随机波动而增长

**** detect_file_args

这个就是从命令行参数中获取程序的交互方式@@表示，直接传文件给目标程序，如果没有，那么将文件读取出来，然后通过标准输入与输出的方式传给目标程序。

**** setup_stdio_file

如果使用标准输入输出模式，那么便打开输出目录中的.cur_input文件，文件描述符保存在out_fd中

**** check_binary

检查文件是不是有效的，是不是有效的二进制文件且正常插桩了。如果设置环境变量AFL_SKIP_BIN_CHECK便可以跳过检查

**** get_qemu_argv

如果使用qemu模式，获取qemu的参数信息，并设置新的qemu启动参数，具体来说就是使用 =afl-qemu-trace -- target_path= ，

**** perform_dry_run

执行所有测试用例，以确认应用程序按预期运行。这仅针对初始输入执行，并且只执行一次。AFL_SKIP_CRASHES这个环境变量可以跳过测试用例崩溃的情况。

会遍历队列，调用calibrate_case函数（用于验证目标程序的稳定性和初始化关键参数）去执行队列中的测试用例，如果forkserver没有初始化，先去初始化这个forkserver，其中会创建管道来与forkserver通信。然后将测试用例写入out_fd，并运行测试用例。 根据共享内存的edge的执行情况更新trace_bits，并通过 hash32(trace_bits) 计算覆盖率数据的哈希值，用于一致性校验，判断有没有新的bits，并根据状态结果更新分数。 =update_bitmap_score= ：当我们遇到一条新路径时，我们会调用此方法查看该路径是否比任何现有路径看起来更“有利”。 “有利”的目的是拥有一组最小的路径，这些路径会触发迄今为止在位图中看到的所有位，并专注于模糊化它们，而忽略其余部分。该过程的第一步是为位图中的每个字节维护一个 top_rated[] 条目列表。 如果没有先前的竞争者，或者竞争者的速度 x 大小因子更有利，我们将赢得该位置。

**** update_bitemap_score

每当我们发现一个新的路径，都会调用这个函数来判断其是不是更加地favorable，这个favorable的意思是说是否包含最小的路径集合来遍历到所有bitmap中的位，我们专注于这些集合而忽略其他的。

首先计算出这个case的fav_factor，计算方法是q->exec_us * q->len即执行时间和样例大小的乘积，以这两个指标来衡量权重。

遍历trace_bits数组，如果该字节的值不为0，则代表这是已经被覆盖到的path

然后检查对应于这个path的top_rated是否存在

=static struct queue_entry *top_rated[MAP_SIZE];= 

如果存在，就比较 =fav_factor > top_rated[i]->exec_us * top_rated[i]->len= ，即比较执行时间和样例大小的乘积，哪个更小。

如果top_rated[i]的更小，则代表top_rated[i]的更优，不做任何处理，继续遍历下一个path。

如果q更小，就将top_rated[i]原先对应的queue entry的tc_ref字段减一，并将其trace_mini字段置为空。


u8 *trace_mini;

u32 tc_ref;

然后设置top_rated[i]为q，即当前case，然后将其tc_ref的值加一

如果q->trace_mini为空，则将trace_bits经过minimize_bits压缩，然后存到trace_mini字段里

设置score_changed为1。



**** cull_queue

AFL在模糊测试过程中会维护一个队列(queue)，里面保存了所有能触发新代码路径的测试用例。随着测试进行，队列可能会变得很大，导致效率下降。这时候就需要裁剪队列，保留最重要的测试用例，去除冗余的部分，这就是cull_queue的作用。

如果score_changed为0，即top_rated没有变化，或者dumb_mode,就直接返回

设置score_changed的值为0

创建u8 temp_v数组，大小为MAP_SIZE除8，并将其初始值设置为0xff，其每位如果为1就代表还没有被覆盖到，如果为0就代表以及被覆盖到了。

设置queued_favored为0，pending_favored为0

开始遍历queue队列，设置其favored的值都为0

将i从0到MAP_SIZE迭代，这个迭代其实就是筛选出一组queue entry，它们就能够覆盖到所有现在已经覆盖到的路径，而且这个case集合里的case要更小更快，这并不是最优算法，只能算是贪婪算法。

这又是个不好懂的位运算，temp_v[i >> 3] & (1 << (i & 7))与上面的差不多，中间的或运算改成了与，是为了检查该位是不是0，即判断该path对应的bit有没有被置位。


**** 状态更新相关

show_init_stats,

find_start_positon,

write_stats_file,

save_auto。


*** 变异测试（核心）

主循环：

cull_queue：然后如果queue_cur为空，queue都被执行完一轮，这时候设置queue_cycle计数器加一，这个值带白哦queue被执行了多少轮。设置current_entry为0，和queue_cur为queue首元素，开始新一轮fuzz，

执行fuzz_one来对queue_cur进行一次测试

然后 ~queue_cur = queue_cur->next;current_entry++;~ 取出下一个元素。

fuzz_one：这个函数很长，大致就是从当前队列中取出一个测试用例，对其进行fuzz。

fuzz_one会负责变异测试用例，运行测试，获取反馈信息，然后向队列中添加变异的有价值的测试用例。

具体分以下几个过程介绍：




**** calibrate：

前面介绍过，对测试用例进行校准，假如当前项有校准错误，并且校准错误次数小于3次，那么就用calibrate_case再次校准。会对每个初始种子进行 ​校准测试，以确定其执行速度、稳定性及超时阈值。执行3次或8次取平均值。

=run_target= :清空trace_bit，执行程序，统计信息，包括运行时间，数据规整，进程结束原因。

**** trimming：

tram新的测试用例，如果该case没有trim过，调用函数trim_case(argv, queue_cur, in_buf)进行trim(修剪)，并设置queue_cur的trim_done为1。重新读取一次queue_cur->len到len中，并将in_buf拷贝len个字节到out_buf中

函数 trim_case() 负责减小测试用例的大小，同时确保执行路径保持不变。通过从测试用例中删除不必要的字节，这有助于在确定性模糊测试期间节省 CPU 周期。

如果输入太小（<5 个字节），则跳过修剪。跟踪修剪前测试用例的总大小记录在 =bytes_trim_in= 中。

trim从较大的块大小（2 的幂）开始。块大小会动态调整，以最大程度提高效率。


~while (remove_len >= MAX(len_p2 / TRIM_END_STEPS, TRIM_MIN_BYTES)) {~
迭代直到删除的块足够小，

#+BEGIN_SRC C
  u32 trim_avail = MIN(remove_len, q->len - remove_pos);
  write_with_gap(in_buf, q->len, remove_pos, trim_avail);
  fault = run_target(argv, exec_tmout);
  
#+END_SRC
对这个块位置迭代，把这个选中的块移除再写进测试文件，然后运行程序。再去比较运行结果的trace_bit的hash，如果跟以前相同，那么删除这个块，继续迭代。最后用最小结果替换测试用例。


该函数会迭代地从测试用例中删除数据块，同时确保程序的执行保持不变。如果可以在不影响覆盖率的情况下删除某个数据块，则将保存新的较小测试用例。




#+BEGIN_SRC C

    static void update_bitmap_score(struct queue_entry* q){}
    //这个函数会更新每个edge的最优的case，使用top_rated[edge的index]记录，判断准则就是执行时间和case的大小

      
    //src中的数据是byte，现在换成bit
    static void minimize_bits(u8* dst, u8* src) {

      u32 i = 0;

      while (i < MAP_SIZE) {

        if (*(src++)) dst[i >> 3] |= 1 << (i & 7);
        i++;

      }

    }


      //遍历 src（原始执行位图）src 包含字节级执行跟踪数据。

      //检查字节是否非零（if (*(src++)))，这意味着在此索引处发生了一些执行。

      //设置 dst 中的相应位dst[i >> 3] → 确定应修改 dst 中的哪个字节。1 << (i & 7) → 确定应设置该字节中的哪个位。按位或（|=）确保我们不会覆盖先前的位。

#+END_SRC


**** performance score

=perf_score = calculate_score(queue_cur)=

如果skip_deterministic为1，或者queue_cur被fuzz过，或者queue_cur的passed_det为1，则跳转去havoc_stage阶段。

没有就设置doing_det为1，继续deterministic的fuzz


关于评分：数据都是在calibrate_case中记录的；执行时间约短评分越高，执行的edge越多评分越高。handicap越大，品格分越高。depth越深，评分越高。（有个上限1600）



**** simple bitflip

定义了一个宏 =#define FLIP_BIT(_ar, _b)= 用于bit位翻转。

设置stage_name为bitflip 1/1,_ar的取值是out_buf,而_bf的取值在[0: len << 3)
所以用_bf & 7能够得到0,1,2...7 0,1,2...7这样的取值一共len组，然后(_bf) >> 3又将[0: len<<3)映射回了[0: len)，对应到buf里的每个byte。所以在从0-len*8的遍历过程中会通过亦或运算，依次将每个位翻转，然后执行一次common_fuzz_stuff，然后再翻转回来。


后续翻转2，4，8，16，32位，也是类似的操作。


=common_fuzz_stuff= : 把测试用例写进文件，然后 =run_target= ，调用 =save_if_interesting= 。

这个save_if_interesting会看看样本有没有新的行为，比如新edge被发现或者target crash了等，如果有就把它加入到队列头中。然后调用calibrate。1. 函数首先会处理crash_mode，如果故障与崩溃有关：它会检查位图是否有新位（has_new_bits()），如果发现新位，它会将测试用例添加到队列并将其保存到队列目录中的文件中。它还会校准案例以收集有关其执行路径的更多信息。测试用例保存在具有特定命名模式的文件中（SIMPLE_FILES 或非 SIMPLE_FILES）。2. 处理FAULT_TMOUT超时错误，如果故障是超时：它会检查挂起特定位图中是否有新位，如果没有发现新位，则不会保存测试用例，如果测试用例是潜在挂起，程序会以更长的超时时间运行它，以确认它是否确实挂起。如果认为有趣，它会保存在挂起目录中。3. 处理crash错误FAULT_CRASH，如果故障是崩溃：测试用例仅在触发新行为（位图中的新位）时才被保存。它会检查崩溃是否唯一，如果是，则将其保存到崩溃目录中。如果这是第一次崩溃，它会编写包含崩溃详细信息的README（write_crash_readme）。其余错误，FAULT_ERROR会报错，其他情况直接返回。4. 最后一步：如果满足上述任何条件，将测试用例保存到文件中。根据崩溃或挂起情况，将文件保存到目录中，并将测试用例添加到队列中以供将来进行模糊测试。



**** arithmetic inc/dec

在bitflip变异全部进行完成后，便进入下一个阶段：arithmetic。与bitflip类似的是，arithmetic根据目标大小的不同，也分为了多个子阶段：

arith 8/8，每次对8个bit进行加减运算，按照每8个bit的步长从头开始，即对文件的每个byte进行整数加减变异

arith 16/8，每次对16个bit进行加减运算，按照每8个bit的步长从头开始，即对文件的每个word进行整数加减变异

arith 32/8，每次对32个bit进行加减运算，按照每8个bit的步长从头开始，即对文件的每个dword进行整数加减变异

加减变异的上限，在config.h中的宏ARITH_MAX定义，默认为35。所以，对目标整数会进行+1, +2, …, +35, -1, -2, …, -35的变异。特别地，由于整数存在大端序和小端序两种表示方式，AFL会贴心地对这两种整数表示方式都进行变异。

此外，AFL还会智能地跳过某些arithmetic变异。第一种情况就是前面提到的effector map：如果一个整数的所有bytes都被判断为“无效”，那么就跳过对整数的变异。第二种情况是之前bitflip已经生成过的变异：如果加/减某个数后，其效果与之前的某种bitflip相同，那么这次变异肯定在上一个阶段已经执行过了，此次便不会再执行。



**** interesting values

下一个阶段是interest，具体可分为：

interest 8/8，每次对8个bit进替换，按照每8个bit的步长从头开始，即对文件的每个byte进行替换

interest 16/8，每次对16个bit进替换，按照每8个bit的步长从头开始，即对文件的每个word进行替换

interest 32/8，每次对32个bit进替换，按照每8个bit的步长从头开始，即对文件的每个dword进行替换

而用于替换的”interesting values”，是AFL预设的一些比较特殊的数,这些数的定义在config.h文件中

与之前类似，effector map仍然会用于判断是否需要变异；此外，如果某个interesting value，是可以通过bitflip或者arithmetic变异达到，那么这样的重复性变异也是会跳过的。



**** dictionary stuff

进入到这个阶段，就接近deterministic fuzzing的尾声了。具体有以下子阶段：

user extras(over),从头开始,将用户提供的tokens依次替换到原文件中,stage_max为extras_cnt * len

user extras(insert),从头开始,将用户提供的tokens依次插入到原文件中,stage_max为extras_cnt * len

auto extras(over),从头开始,将自动检测的tokens依次替换到原文件中,stage_max为MIN(a_extras_cnt, USE_AUTO_EXTRAS) * len

其中，用户提供的tokens，是在词典文件中设置并通过-x选项指定的，如果没有则跳过相应的子阶段。


**** random havoc

对于非dumb mode的主fuzzer来说，完成了上述deterministic fuzzing后，便进入了充满随机性的这一阶段；对于dumb mode或者从fuzzer来说，则是直接从这一阶段开始。

havoc，顾名思义，是充满了各种随机生成的变异，是对原文件的“大破坏”。具体来说，havoc包含了对原文件的多轮变异，每一轮都是将多种方式组合（stacked）而成：

随机选取某个bit进行翻转

随机选取某个byte，将其设置为随机的interesting value

随机选取某个word，并随机选取大、小端序，将其设置为随机的interesting value

随机选取某个dword，并随机选取大、小端序，将其设置为随机的interesting value

随机选取某个byte，对其减去一个随机数

随机选取某个byte，对其加上一个随机数

随机选取某个word，并随机选取大、小端序，对其减去一个随机数

随机选取某个word，并随机选取大、小端序，对其加上一个随机数

随机选取某个dword，并随机选取大、小端序，对其减去一个随机数

随机选取某个dword，并随机选取大、小端序，对其加上一个随机数

随机选取某个byte，将其设置为随机数

随机删除一段bytes

随机选取一个位置，插入一段随机长度的内容，其中75%的概率是插入原文中随机位置的内容，25%的概率是插入一段随机选取的数

随机选取一个位置，替换为一段随机长度的内容，其中75%的概率是替换成原文中随机位置的内容，25%的概率是替换成一段随机选取的数

随机选取一个位置，用随机选取的token（用户提供的或自动生成的）替换

随机选取一个位置，用随机选取的token（用户提供的或自动生成的）插入


**** splicing

设置ret_val的值为0

如果queue_cur通过了评估，且was_fuzzed字段是0，就设置queue_cur->was_fuzzed为1，然后pending_not_fuzzed计数器减一

如果queue_cur是favored, pending_favored计数器减一。




** 注意：

在mac上不要使用gcc和afl-gcc，要用clang和afl-clang，-B参数不知为啥无法生效，mac下的gcc也是一层wrapper，实际调用的是clang估计里面有什么bug。


当目标文件很大的时候，编译目标文件开启以下宏定义
AFL_INST_RATIO=10

多线程不稳定：

- 使用 llvm_mode/ 中的 afl-clang-fast - 它使用不易出现并发问题的线程本地跟踪

- 查看目标是否可以在没有线程的情况下编译或运行。常见的 ./configure 选项包括 --without-threads、--disable-pthreads 或 --disable-openmp。

- 将 pthreads 替换为 GNU Pth (https://www.gnu.org/software/pth/)，这样可以使用确定性调度程序。


一些关键状态屏幕信息也可以以机器可读的格式在输出目录中的 fuzzer_stats 文件中找到

编译时尽量开启asan，asan的原理就是hook了malloc，free，还有load，set这样的函数然后把地址和大小记录下来，读写的时候会比对内存信息。





** 无源码插桩

DynamoRIO，winafl运行时的覆盖率收集



** 实践Fuzzing101



*** Exercise 1

#+BEGIN_SRC C

  mkdir ~/fuzzing_xpdf
  
  AFL_PATH=/root/AFL/ CC=/root/AFL/afl-gcc CXX=/root/AFL/afl-g++ ./configure --prefix="/root/fuzzing_xpdf/"
      

  echo core >/proc/sys/kernel/core_pattern


  /root/AFL/afl-fuzz -i /root/fuzzing_xpdf/pdf_examples/ -o /root/fuzzing_xpdf/out/  -- /root/fuzzing_xpdf/bin/pdftotext @@ /root/fuzzing_xpdf/output

 #+END_SRC

result: 跑了一晚上有7个crash。有栈溢出的崩溃。

 
*** Exercise 2


 #+BEGIN_SRC C
   AFL_PATH=/root/AFL/ CC=/root/AFL/afl-gcc CXX=/root/AFL/afl-g++ ./configure --enable-shared=no --prefix="$HOME/fuzzing_libexif/install/" PKG_CONFIG_PATH=$HOME/fuzzing_libexif/install/lib/pkgconfig


   /root/AFL/afl-fuzz -i $HOME/fuzzing_libexif/exif-samples-master/jpg/ -o $HOME/fuzzing_libexif/out/  -- $HOME/fuzzing_libexif/install/bin/exif @@

 #+END_SRC

启动多个fuzzer：

#+BEGIN_SRC C
  /root/AFL/afl-fuzz -i $HOME/fuzzing_libexif/exif-samples-master/jpg/ -o $HOME/fuzzing_libexif/out/ -M fuzzer1 -- $HOME/fuzzing_libexif/install/bin/exif @@


  /root/AFL/afl-fuzz -i $HOME/fuzzing_libexif/exif-samples-master/jpg/ -o $HOME/fuzzing_libexif/out/ -S fuzzer2 -- $HOME/fuzzing_libexif/install/bin/exif @@


  /root/AFL/afl-fuzz -i $HOME/fuzzing_libexif/exif-samples-master/jpg/ -o $HOME/fuzzing_libexif/out/ -S fuzzer3 -- $HOME/fuzzing_libexif/install/bin/exif @@

  /root/AFL/afl-whatsup $HOME/fuzzing_libexif/out/

#+END_SRC



*** Exercise 6

#+BEGIN_SRC shell
  export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/root/Fuzzing_gimp/install/lib

  export LIBRARY_PATH=$LIBRARY_PATH:/root/Fuzzing_gimp/install/lib

  export PATH=$PATH:/root/Fuzzing_gimp/install/bin

  export C_INCLUDE_PATH=$C_INCLUDE_PATH:/root/Fuzzing_gimp/install/include/

  export CPLUS_INCLUDE_PATH=$CPLUS_INCLUDE_PATH:/root/Fuzzing_gimp/install/include/



  CC=/root/AFL/afl-gcc CXX=/root/AFL/afl-g++ PKG_CONFIG_PATH=$PKG_CONFIG_PATH:$HOME/Fuzzing_gimp/gegl-0.2.0/  ./configure --disable-gtktest --disable-glibtest --disable-alsatest --disable-nls --without-libtiff --without-libjpeg --without-bzip2 --without-gs --without-libpng --without-libmng --without-libexif --without-aa --without-libxpm --without-webkit --without-librsvg --without-print --without-poppler --without-cairo-pdf --without-gvfs --without-libcurl --without-wmf --without-libjasper --without-alsa --without-gudev --disable-python --enable-gimp-console --without-mac-twain --without-script-fu --without-gudev --without-dbus --disable-mp --without-linux-input --without-xvfb-run --with-gif-compression=none --without-xmc --with-shm=none --enable-debug  --prefix="$HOME/Fuzzing_gimp/gimp-2.8.16/install"
  make -j$(nproc)
  make install
  


  ASAN_OPTIONS=detect_leaks=0,abort_on_error=1,symbolize=0 /root/AFL/afl-fuzz -i './afl_in' -o './afl_out'  -t 100 -- ./install/bin/gimp-console-2.8 --verbose -d -f @@

#+END_SRC



** 参考链接

[sakura的afl源码分析](https://eternalsakura13.com/2020/08/23/afl/)


