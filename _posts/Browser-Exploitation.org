** start

[bolg](https://liveoverflow.com/getting-into-browser-exploitation-new-series-introduction-browser-0x00/)

Linus's Exploit:(https://github.com/LinusHenze/WebKit-RegEx-Exploit)
Niklas's Exploit: (https://github.com/niklasb/sploits/blob/master/safari/regexp-uxss.html)
ZDI's Blog:(https://www.zerodayinitiative.com/blog/2019/3/14/the-apple-bug-that-fell-near-the-webkit-tree) 
Saelo's german class: (https://www.youtube.com/watch?v=1RLt7yscBZc)
Saelo's Attacking JavaScript Engines: (https://phrack.org/papers/attacking_javascript_engines.html)
ret2system's blog: (http://blog.ret2.io/2018/06/05/pwn2own-2018-exploit-development/)


** Setup and debug javascriptcore/webkit




复现漏洞：12.0.1（14606.2.104.1.1）可以通过浏览器http请求头找到safari的版本号，

获取[src](https://webkit.org/getting-the-code/)

切换到特定的commit： =git checkout 3af5ce129e6636350a887d01237a65c2fce77823=

通过这个： =git log --reverse --ancestry-path 3af5ce129e6636350a887d01237a65c2fce77823..master= 可以查看后续的补丁提交信息

编译： =Tools/Scripts/build-webkit --jsc-only --debug=

运行： =./WebKitBuild/Debug/bin/jsc=

describe()函数是内置的一个辅助调试的函数，可以用来获取对象的信息。

lldb调试


WebKit：WebCore和JavaScriptCore，
WebCore：html渲染
JavaScriptcore javascript引擎

** The Butterfly of JSObject

快速浏览了数组 [1， 2， 3， 4]的内存(通过describe函数)并找到了这些数字，但我们还看到它的所有高位都设置为 0xffff。可以在源码的JSCJSValue.h文件中找到。

数据有一个地址，Object的地址，还有Butterfly地址，当类型是个{}空类型时，然后往里边添加元素，会发现，它的Butterfly地址时0x0，这是因为它会先用内联结构，等到加到一定数量了，会在分配新的Butterfly的内存。

** Just-in-time Compiler in JavaScriptCore

[webkit JavaScriptCore CSI：崩溃现场调查故事](https://webkit.org/blog/6411/javascriptcore-csi-a-crash-site-investigation-story/)

#+BEGIN_SRC sh
  $ cd webkitDIr
  $ ./Tools/Scripts/set-webkit-configuration --asan
  $ ./Tools/Scripts/build-webkit --debug

#+END_SRC
JSC 包含多个执行引擎层级。
级别1：LLInt 解释器（LowLevelInterpreter.cpp）
级别2：JIT 编译器（JIT.cpp）
级别3：DFG JIT （Data Flow Graph）
级别4：FTL JIT （LLVM ，现在用B3后端取代了）

** WebKit RegExp Exploit









